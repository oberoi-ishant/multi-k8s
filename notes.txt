This project relates to simplek8s folder.
SAME PROJECT(comples_without_k8s) NOW WITH KUBERNETES
IMAGE(path-to-production)
We only need services (ClusterIP) only when there are requests
going into a set of pods.
# Since worker is not going to be accessed by any other Object,
# we do not need any ClusterIP service or any port for worker.
# We need ClusterIP service only when some other object/service needs
# to access something inside the pod. Since there is nothing coming
# in to worked to access anything we don't need ports or ClusterIP.
# worker is accessing other service/pod (here redis) but none is
# reaching into worker for anything.

COMMAND TO CHECK LOGS
- kubectl get pods ...
  then get the pod-id
- kubectl logs <pod-id>

PVC - Persistent Volume Claim

Volumes
In generic terms: some type of mechanism that allows a container to access a file system outside itself.
Like we used in docker run -v command.
In k8s world: An object that allows a container to store data at the pod level.

Image(k8s-volume, pvc-pv-volume)
A kubernetes Volume is tied to the pod. It can survice container restarts.
But if the pod gets killed entire data is also wiped out.

Image(pvc-part-one, pvc-part-two)
Persistent Volume: storage outside the pod. So it can survive pod crash. New pod can connect to it and carry on.
Persistent Volume Claim (PVC) is like an advertisement. It is not a volume that exists.
Statically Provisioned Persistent Volume: is the volumed that is provisioned ahead of time.
Dynamically Provisioned Persistent Volume: is dynanically provisioned. It was not created until we asked for it.

AccessModes: (Image: access-modes)
ReadWriteOnce: can be used by a single node at a time.
ReadOnlyMany: multiple nodes can read from it.
ReadWriteMany: can be read and written to by many nodes.

(Image: pvc-allocation*)
Storage options to provision PVC
- kubectl get storageclass
- kubectl describe storageclass

You see Provisioner mentioned: k8s.io/minikube-hostpath
Means on the host machine where minikube is provisioned.

On a personal laptop or desktop only option is hard drive
so this tells the options where pvc can be provosioned.

Object Type:
Secrets: securely stores a piece of information in the cluster, such as db password.
Something that you dont want to expose to outside world, but give access to container.
Use imperative command to create a secret. Its a secret so cannot add to a config yml file and give to k8s.
    kubectl create secret generic pgpassword --from-literal PGPASSWORD=pgpassword
    kubectl create <object-type> <type-of-object> <secret-name> --from-literal key=value

    --from-literal means will add info here and not read from a file.


Controller: In k8s a Controller is any object that works continously to get the desired state of the object inside the cluster.
check Image (Controller-k8s, ingress-controller-flow-*, ingress-nginx-specific-rule).
So in ingress-nginx-specific-rule we see that in this very specific implementation of
nginx the controller and the `thing` that actually manages the traffic is the same thing.
It may be different in other nginx implementations.

Check nginx-ingress-google-cloud-setup.png, we see that in Google cloud setup,
we there is on load balancer service created for us.
Also there is one addiotnal deployment called default-backend-pod created to run a series of health checks to make
sure the cluster is running the way it should be. In ideal world this health check should be done using the backend serivce mutli-server. So you should configure it
in real projects.

Y use nginx-ingress (image: y-use-ngin-xingress)?
We could have manually also configured nginx like we have done for other projects.
but the ingress-nginx project already has few extra configurations done.
Like it will internally route to request to the same multi-client container inside pod directly to preserve sticky session, thereby
bypassing the clusterIP service completely. So for many such scenarios will use this project.
Optional reading on Ingress Nginx - https://www.joyfulbikeshedding.com/blog/2018-03-26-studying-the-kubernetes-ingress-system.html

Check nginx-ingress installation steps at
https://kubernetes.github.io/ingress-nginx/deploy/
1. Run the first command Docker for Mac (Mandatory command)
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud/deploy.yaml
2. Run the minikube command:
minikube addons enable ingress

After setting the ingress-nginx and applying it using kubectl apply,
we can visit our minikube ip and see our app load.
We do not require the port number 31515 as we are not using the node-port here.
ingress is listening for traffic on port 80 and 443 for us.
And browser will by default direct traffic to 80 or 443 depending on https connection in use or not.